package elliptic

import (
    "big"
    "bytes"
    "io"
    "github.com/aws/amazon-ssm-agent/agent/iospecs/abs"
    by "github.com/aws/amazon-ssm-agent/agent/iospecs/bytes"
    "github.com/aws/amazon-ssm-agent/agent/iospecs/iospec"
    pl "github.com/aws/amazon-ssm-agent/agent/iospecs/place"
    tm "github.com/aws/amazon-ssm-agent/agent/iospecs/term"
)

type Curve interface {
    pred Mem()

    requires noPerm < p
    preserves acc(Mem(), p) && acc(x.Mem(), p) && acc(y.Mem(), p)
    IsOnCurve(x, y *big.Int, ghost p perm) bool
    
    requires noPerm < p
    preserves acc(Mem(), p) && acc(x1.Mem(), p) && acc(y1.Mem(), p) && acc(bytes.SliceMem(k), p)
    ensures x.Mem() && y.Mem()
    ScalarMult(x1, y1 *big.Int, k []byte, ghost p perm) (x, y *big.Int)
}

ensures curve != nil && curve.Mem()
func P384() (curve Curve)

preserves curve.Mem() && rand.Mem()
requires pl.token(t0) && iospec.e_FrFact(t0, rid)
ensures  err == nil ==> bytes.SliceMem(priv) && x.Mem() && y.Mem()
ensures  err == nil ==> pl.token(t1) && t1 == old(iospec.get_e_FrFact_placeDst(t0, rid))
ensures  err == nil ==> abs.Abs(priv) == by.gamma(old(iospec.get_e_FrFact_r1(t0, rid)))
ensures  err != nil ==> err.ErrorMem()
ensures  err != nil ==> t1 == t0 && pl.token(t0) && iospec.e_FrFact(t0, rid) &&
    iospec.get_e_FrFact_placeDst(t0, rid) == old(iospec.get_e_FrFact_placeDst(t0, rid)) &&
    iospec.get_e_FrFact_r1(t0, rid) == old(iospec.get_e_FrFact_r1(t0, rid))
func GenerateKey(curve Curve, rand io.Reader, ghost t0 pl.Place, ghost rid tm.Term) (priv []byte, x *big.Int, y *big.Int, err error, ghost t1 pl.Place)

requires noPerm < p
preserves curve.Mem() && acc(x.Mem(), p) && acc(y.Mem(), p)
ensures bytes.SliceMem(res)
func MarshalCompressed(curve Curve, x *big.Int, y *big.Int, ghost p perm) (res []byte)

requires noPerm < p
preserves curve.Mem() && bytes.SliceMem(data)
ensures x.Mem() && y.Mem()
func UnmarshalCompressed(curve Curve, data []byte, ghost p perm) (x *big.Int, y *big.Int)
