diff --git a/agent/session/datachannel/send.go b/agent/session/datachannel/send.go
index c7e865d9..246a6775 100644
--- a/agent/session/datachannel/send.go
+++ b/agent/session/datachannel/send.go
@@ -36,7 +36,8 @@ import (
 // @ preserves log != nil ==> acc(log.Mem(), _)
 // @ preserves inputData != nil ==> bytes.SliceMem(inputData)
 // @ ensures   err != nil ==> err.ErrorMem()
-func (dc *dataChannel) SendStreamDataMessage(log logger.T, payloadType mgsContracts.PayloadType, inputData []byte) (err error) {
+func (dc *dataChannel) SendStreamDataMessage(log logger.T, payloadType mgsContracts.PayloadType, data *[]byte) (err error) {
+	inputData := *data
 	if dc == nil || log == nil || inputData == nil {
 		return fmtErrorNil()
 	}
diff --git a/agent/session/datachannel/state.go b/agent/session/datachannel/state.go
index 3a84bf20..ccdfc6bc 100644
--- a/agent/session/datachannel/state.go
+++ b/agent/session/datachannel/state.go
@@ -47,6 +47,9 @@ const (
 )
 
 type IDataChannel interface {
+	// FOR DIODON ARTIFACT ONLY
+	// Leaks session ID slice to caller so that it can be used to alias datachannel state
+	GetSessionID() *[]byte
 
 	// @ pred Mem()
 
@@ -54,7 +57,7 @@ type IDataChannel interface {
 	// @ preserves log != nil ==> acc(log.Mem(), _)
 	// @ preserves inputData != nil ==> bytes.SliceMem(inputData)
 	// @ ensures   err != nil ==> err.ErrorMem()
-	SendStreamDataMessage(log logger.T, dataType mgsContracts.PayloadType, inputData []byte) (err error)
+	SendStreamDataMessage(log logger.T, dataType mgsContracts.PayloadType, data *[]byte) (err error)
 
 	// @ preserves Mem()
 	// @ preserves log != nil ==> acc(log.Mem(), _)
@@ -185,6 +188,10 @@ type ioSpecFields struct {
 }
 @*/
 
+func (dc *dataChannel) GetSessionID() *[]byte {
+	return &dc.secrets.sessionID
+}
+
 // agentHandshakeSecrets represents the secrets used in the handshake.
 type agentHandshakeSecrets struct {
 	agentSecret   []byte
diff --git a/agent/session/plugins/port/port.go b/agent/session/plugins/port/port.go
index 8f4a8d1e..c31ed0cb 100644
--- a/agent/session/plugins/port/port.go
+++ b/agent/session/plugins/port/port.go
@@ -232,7 +232,8 @@ func (p *PortPlugin) execute(
 		for {
 			select {
 			case msg := <-outChannel:
-				if err = p.dataChannel.SendStreamDataMessage(log, msg.payloadType, msg.payload); err != nil {
+				sid := p.dataChannel.GetSessionID()
+				if err = p.dataChannel.SendStreamDataMessage(log, msg.payloadType, sid); err != nil {
 					log.Errorf("Unable to send stream data message: %v", err)
 					done <- appconfig.ErrorExitCode
 				}
diff --git a/agent/session/shell/shell.go b/agent/session/shell/shell.go
index f5f8f03b..e4d0a97b 100644
--- a/agent/session/shell/shell.go
+++ b/agent/session/shell/shell.go
@@ -329,7 +329,7 @@ func (p *ShellPlugin) executeCommandsWithPty(config agentContracts.Configuration
 	for {
 		select {
 		case m := <-outChannel:
-			if err := p.dataChannel.SendStreamDataMessage(log, m.payloadType, m.payload); err != nil {
+			if err := p.dataChannel.SendStreamDataMessage(log, m.payloadType, &m.payload); err != nil {
 				log.Errorf("Unable to send stream data message: %v", err)
 			}
 		case <-cancelled:
@@ -470,7 +470,7 @@ func (p *ShellPlugin) processCommandsWithOutputStreamSeparate(cancelled chan boo
 		for {
 			select {
 			case m := <-outChannel:
-				if err := p.dataChannel.SendStreamDataMessage(log, m.payloadType, m.payload); err != nil {
+				if err := p.dataChannel.SendStreamDataMessage(log, m.payloadType, &m.payload); err != nil {
 					log.Errorf("Unable to send stream data message: %v", err)
 				}
 			case <-cancelled:
@@ -572,7 +572,7 @@ func (p *ShellPlugin) processCommandsWithExec(cancelled chan bool,
 	for {
 		select {
 		case m := <-outChannel:
-			if err := p.dataChannel.SendStreamDataMessage(log, m.payloadType, m.payload); err != nil {
+			if err := p.dataChannel.SendStreamDataMessage(log, m.payloadType, &m.payload); err != nil {
 				log.Errorf("Unable to send stream data message: %v", err)
 			}
 		case <-cancelled:
@@ -756,7 +756,7 @@ func (p *ShellPlugin) sendExitCode(log log.T, ipcFile *os.File, exitCode int) er
 			log.Errorf("Error processing command pipeline output data, %v", err)
 		}
 		m := <-outChannel
-		p.dataChannel.SendStreamDataMessage(p.context.Log(), m.payloadType, m.payload)
+		p.dataChannel.SendStreamDataMessage(p.context.Log(), m.payloadType, &m.payload)
 	} else {
 		return fmt.Errorf("failed to send exit code as data channel closed")
 	}
