// Code generated by mockery v2.4.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// T is an autogenerated mock type for the T type
type T struct {
	mock.Mock
}

// GetDownloadURLAndHash provides a mock function with given fields: packageName, version
func (_m *T) GetDownloadURLAndHash(packageName string, version string) (string, string, error) {
	ret := _m.Called(packageName, version)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(packageName, version)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(packageName, version)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(packageName, version)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetLatestActiveVersion provides a mock function with given fields: version
func (_m *T) GetLatestActiveVersion(version string) (string, error) {
	ret := _m.Called(version)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(version)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestVersion provides a mock function with given fields: version
func (_m *T) GetLatestVersion(version string) (string, error) {
	ret := _m.Called(version)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(version)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasVersion provides a mock function with given fields: packageName, version
func (_m *T) HasVersion(packageName string, version string) bool {
	ret := _m.Called(packageName, version)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(packageName, version)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsVersionActive provides a mock function with given fields: packageName, version
func (_m *T) IsVersionActive(packageName string, version string) (bool, error) {
	ret := _m.Called(packageName, version)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(packageName, version)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(packageName, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsVersionDeprecated provides a mock function with given fields: packageName, version
func (_m *T) IsVersionDeprecated(packageName string, version string) (bool, error) {
	ret := _m.Called(packageName, version)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(packageName, version)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(packageName, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadManifest provides a mock function with given fields: manifestPath
func (_m *T) LoadManifest(manifestPath string) error {
	ret := _m.Called(manifestPath)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(manifestPath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
