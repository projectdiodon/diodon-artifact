// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "github.com/aws/amazon-ssm-agent/agent/context"
	agentcontracts "github.com/aws/amazon-ssm-agent/agent/contracts"
	contracts "github.com/aws/amazon-ssm-agent/agent/session/contracts"
	mock "github.com/stretchr/testify/mock"
	uuid "github.com/twinj/uuid"
)

// IReplyType is an autogenerated mock type for the IReplyType type
type IReplyType struct {
	mock.Mock
}

// ConvertToAgentMessage provides a mock function with given fields:
func (_m *IReplyType) ConvertToAgentMessage() (*contracts.AgentMessage, error) {
	ret := _m.Called()

	var r0 *contracts.AgentMessage
	if rf, ok := ret.Get(0).(func() *contracts.AgentMessage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contracts.AgentMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBackOffSecond provides a mock function with given fields:
func (_m *IReplyType) GetBackOffSecond() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetMessageUUID provides a mock function with given fields:
func (_m *IReplyType) GetMessageUUID() uuid.UUID {
	ret := _m.Called()

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func() uuid.UUID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	return r0
}

// GetName provides a mock function with given fields:
func (_m *IReplyType) GetName() agentcontracts.ResultType {
	ret := _m.Called()

	var r0 agentcontracts.ResultType
	if rf, ok := ret.Get(0).(func() agentcontracts.ResultType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(agentcontracts.ResultType)
	}

	return r0
}

// GetNumberOfContinuousRetries provides a mock function with given fields:
func (_m *IReplyType) GetNumberOfContinuousRetries() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetResult provides a mock function with given fields:
func (_m *IReplyType) GetResult() agentcontracts.DocumentResult {
	ret := _m.Called()

	var r0 agentcontracts.DocumentResult
	if rf, ok := ret.Get(0).(func() agentcontracts.DocumentResult); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(agentcontracts.DocumentResult)
	}

	return r0
}

// GetRetryNumber provides a mock function with given fields:
func (_m *IReplyType) GetRetryNumber() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// IncrementRetries provides a mock function with given fields:
func (_m *IReplyType) IncrementRetries() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Initialize provides a mock function with given fields: ctx, result, replyUUID
func (_m *IReplyType) Initialize(ctx context.T, result agentcontracts.DocumentResult, replyUUID uuid.UUID) {
	_m.Called(ctx, result, replyUUID)
}

// ShouldPersistData provides a mock function with given fields:
func (_m *IReplyType) ShouldPersistData() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
